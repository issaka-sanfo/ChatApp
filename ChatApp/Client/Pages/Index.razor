@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime IJSRuntime


<PageTitle>Chat</PageTitle>
<h3>ChatApp</h3>

@if(!IsConnected)
{
	<div class="input-group">
		<input @bind="username" class="form-control" placeholder="Comment vous vous appelez?">
		<button class="btn btn-primary form-group-append" @onclick="Connect">
			Connecter
		</button>
	</div>
}else{
	<textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
		@messages
	</textarea>
	<div class="input-group">
		<input @bind-value="message"
			@bind-value:event="oninput"
			@onkeyup="HandleInput"
			class="form-control"
			placeholder="Ecrivez votre message">
		<button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected)">
			Envoyer
		</button>
	</div>
}


@code{
	private HubConnection? hubConnection;
	private string messages = string.Empty;
	private string username = string.Empty;
	private string message = string.Empty;
	ElementReference TextAreaRef;

	private async Task Connect(){
		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
			.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
			messages += msg + "\n";
			IJSRuntime.InvokeVoidAsync("srollToBottom", TextAreaRef);
			StateHasChanged();
		});

		await hubConnection.StartAsync();
	}

	private async Task Send()
	{
		if(hubConnection != null)
		{
			await hubConnection.SendAsync("AddMessageToChat", username, message);
			message = string.Empty;
		}
	}

	private async Task HandleInput(KeyboardEventArgs args)
	{
		if(args.Key.Equals("Enter"))
		{
			await Send();
		}
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if(hubConnection != null)
		{
			await hubConnection.DisposeAsync();
		}
	}




}
